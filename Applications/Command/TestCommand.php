<?phpnamespace GW\Command;use GW\Service\PokerService;use GW\Utils\Cache;use GW\Utils\Command\Command;use GW\Utils\Command\Console;use GW\Utils\Debug;class TestCommand implements Command{    public function desc()    {        return [            '【脚本用途】专门用于测试',            '【参数】无',            '【返回值】无',        ];    }    /**     *     * 本方法由辉哥倾情贡献     *     * @param $originData     * @param $maxPaiNum     *     * @return false|string     */    public function maxPaiStr($originPaiList, $maxPaiNum)    {        // 获取最大的一张牌 因为牌不会重复，这么做是很好比较大小        $config = ['a', 'b', 'c', 'd'];        foreach ($config as $decor) {            $checkStr = $decor . $maxPaiNum;            if (in_array($checkStr, $originPaiList)) {                return $checkStr;            }        }        return false;    }    // 排列组合    public function combine($arr, $i, $res, $num, &$finalRes = [])    {        if (count($res) == $num) {            $finalRes[] = $res;            return;        }        if ($i == count($arr)) {            return;        }        $res_  = $res;        $res[] = $arr[$i];        $this->combine($arr, $i + 1, $res, $num, $finalRes);        $this->combine($arr, $i + 1, $res_, $num, $finalRes);    }    public function calcuPoint($paiNumItem)    {        $sum = 0;        foreach ($paiNumItem as $pai) {            if ($pai >= 10) {                $pai = 10;            }            $sum += $pai;        }        return $sum;    }    /*     *     */    public function sort($list, $field, $mode = 0)    {        uasort($list, function ($a, $b) use ($field, $mode) {            $valA = $a[$field];            $valB = $b[$field];            if ($valA == $valB) {                return 0;            } else {                // 1 代表升序 0 代表降序                if ($mode) {                    return ($valA < $valB) ? -1 : 1;                } else {                    return ($valA > $valB) ? -1 : 1;                }            }        });        return $list;    }    /**     *     * 计算五小     *     * @param $data     *     * @return array|bool|mixed|void     */    public function isCowCow5Min($paiNumListItem)    {        $sum = $this->calcuPoint($paiNumListItem);        if ($sum > 10) {            return false;        }        return true;    }    // 计算炸弹只需要计算谁的总点数大    public function isCowCowBoom($paiNumListItem)    {        return max(array_count_values($paiNumListItem)) === 4;    }    public function isCowCow5Flower($paiNumListItem)    {        return min($paiNumListItem) > 10;    }    public function isCowCow4Flower($paiNumListItem)    {        if (min($paiNumListItem) != 10) {            return false;        }        $valList = array_count_values($paiNumListItem);        if ($valList[10] != 1) {            return false;        }        return true;    }    public function isCowCowNormal($paiNumListItem)    {        $combineList = [];        $this->combine($paiNumListItem, 0, [], 3, $combineList);        foreach ($combineList as $combineItem) {            // 必须有三张牌加起来等于 10 的倍数            $sum = $this->calcuPoint($paiNumListItem);;            if ($sum % 10 != 0) {                continue;            }            $diff = array_diff($paiNumListItem, $combineItem);            $sum  += $this->calcuPoint($diff);            if ($sum % 10 != 0) {                continue;            }            return true;        }        return false;    }    public function analysisCowCowCate($paiNumListItem)    {        if ($this->isCowCow5Min($paiNumListItem)) {            return '5min';        } elseif ($this->isCowCowBoom($paiNumListItem)) {            return 'boom';        } elseif ($this->isCowCow5Flower($paiNumListItem)) {            return '5flower';        } elseif ($this->isCowCow4Flower($paiNumListItem)) {            return '4flower';        } elseif ($this->isCowCowNormal($paiNumListItem)) {            return 'normal';        } else {            return false;        }    }    // 筛选出所有的牛牛    public function getCowCowMax($dataStrList)    {        // 字符串化处理        $keyList   = array_keys($dataStrList);        $valueList = array_values($dataStrList);        $valueJson = json_encode($valueList);        // 把字母去掉 这里只对value进行处理，以免key出现问题        $stringNoAz = preg_replace("/[a|b|c|d]/", "", $valueJson);        // 还原回来纯数字的数组        $dataNumList = array_combine($keyList, json_decode($stringNoAz, true));        // 再过滤一遍 把假牛干掉        $finalCowCowList = [];        foreach ($dataNumList as $index => $item) {            $temp = $item;            // 倒序 方便比大小            arsort($temp);            $maxPaiNum  = current($temp);            $paiStrList = $dataStrList[$index];            //先算有没有小小牛 这个是特殊情况 为什么要继续，因为还可能有小小牛 这个地方虽然有重复计算的嫌疑，但是因为概率极小，所以可以忽略            $finalCowCowItem = ['clientId' => $index, 'paiNumList' => $temp, 'maxPaiNum' => $maxPaiNum, 'maxPaiStr' => $this->maxPaiStr($paiStrList, $maxPaiNum), 'paiStrList' => $paiStrList];            $cate = $this->analysisCowCowCate($temp);            if ($cate === false) {                continue;            }            $finalCowCowItem['cate']  = $cate;            $finalCowCowList[$cate][] = $finalCowCowItem;        }        if (!$finalCowCowList) {            return [];        }        $cateConfig = [            '5min', 'boom', '5flower', '4flower', 'normal'        ];        $res = [];        foreach ($cateConfig as $cate) {            $group = $finalCowCowList[$cate] ?? [];            if (!$group) {                continue;            }            $group = array_values($this->sort($group, 'maxPaiNum'));            if (count($group) == 1) {                $res = current($group);                break;            }            $a = $group[0];            $b = $group[1];            // 要么a 比 b 大 要么 a = b            if ($a['maxPaiNum'] > $b['maxPaiNum']) {                $res = $a;                break;            }            // 比花色            $res = $a['maxPaiStr'] > $b['maxPaiStr'] ? $b : $a;            break;        }        print_r($finalCowCowList);        print_r("++++++++++++++++++++++++++++++++++++++++");        print_r("\r\n");        print_r($res);    }    public function exec(): void    {        $pai = PokerService::deal([            '7f00000108fc00000001', '7f00000108fc00000002', '7f00000108fc00000003', '7f00000108fc00000004',        ]);        Debug::info($pai);        $cowCowList = $this->getCowCowMax($pai);        print_r($cowCowList);        // 先算出所有牛    }}